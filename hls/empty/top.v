// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top,hls_ip_2014_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.930687,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module top (
        ap_clk,
        ap_rst,
        cfg_req_V,
        cfg_req_V_ap_vld,
        cfg_req_V_ap_ack,
        cfg_resp_V,
        cfg_resp_V_ap_vld,
        cfg_resp_V_ap_ack,
        g_itu_iface_resp_V,
        g_itu_iface_resp_V_ap_vld,
        g_itu_iface_resp_V_ap_ack,
        g_itu_iface_req_V,
        g_itu_iface_req_V_ap_vld,
        g_itu_iface_req_V_ap_ack
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 1'b0;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv5_5 = 5'b101;
parameter    ap_const_lv5_4 = 5'b100;
parameter    ap_const_lv5_3 = 5'b11;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv33_0 = 33'b000000000000000000000000000000000;
parameter    ap_const_lv33_100000000 = 33'b100000000000000000000000000000000;
parameter    ap_const_lv4_6 = 4'b110;
parameter    ap_const_lv32_40 = 32'b1000000;
parameter    ap_const_lv32_44 = 32'b1000100;
parameter    ap_const_lv32_45 = 32'b1000101;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_2F = 32'b101111;
parameter    ap_const_lv32_22 = 32'b100010;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input  [69:0] cfg_req_V;
input   cfg_req_V_ap_vld;
output   cfg_req_V_ap_ack;
output  [32:0] cfg_resp_V;
output   cfg_resp_V_ap_vld;
input   cfg_resp_V_ap_ack;
input  [32:0] g_itu_iface_resp_V;
input   g_itu_iface_resp_V_ap_vld;
output   g_itu_iface_resp_V_ap_ack;
output  [96:0] g_itu_iface_req_V;
output   g_itu_iface_req_V_ap_vld;
input   g_itu_iface_req_V_ap_ack;

reg cfg_req_V_ap_ack;
reg cfg_resp_V_ap_vld;
reg   [3:0] s_result = 4'b0000;
reg   [15:0] s_first_ds_id_V = 16'b0000000000000000;
reg   [15:0] s_first_index_V = 16'b0000000000000000;
reg   [15:0] s_last_ds_id_V = 16'b0000000000000000;
reg   [15:0] s_last_index_V = 16'b0000000000000000;
reg   [2:0] s_pred_V = 3'b000;
wire   [32:0] resp_V_5_fu_141_p1;
reg   [32:0] p_0211_1_phi_fu_94_p16;
reg   [0:0] ap_CS_fsm = 1'b0;
reg    ap_sig_ioackin_cfg_resp_V_ap_ack;
wire   [0:0] tmp_fu_129_p3;
wire   [4:0] grp_fu_116_p4;
wire   [32:0] resp_V_4_fu_150_p1;
wire   [32:0] resp_V_3_fu_159_p1;
wire   [32:0] resp_V_2_fu_168_p1;
wire   [32:0] resp_V_1_fu_177_p1;
wire   [32:0] resp_V_fu_190_p1;
wire   [0:0] tmp_2_fu_205_p2;
reg    ap_reg_ioackin_cfg_resp_V_ap_ack = 1'b0;
wire   [31:0] resp_V_fu_190_p0;
reg   [0:0] ap_NS_fsm;
reg    ap_sig_bdd_178;
reg    ap_sig_bdd_41;
reg    ap_sig_bdd_47;
reg    ap_sig_bdd_53;
reg    ap_sig_bdd_59;
reg    ap_sig_bdd_65;
reg    ap_sig_bdd_71;
reg    ap_sig_bdd_86;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ioackin_cfg_resp_V_ap_ack assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_cfg_resp_V_ap_ack
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_cfg_resp_V_ap_ack <= ap_const_logic_0;
    end else begin
        if ((ap_ST_st1_fsm_0 == ap_CS_fsm)) begin
            if (~((cfg_req_V_ap_vld == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_cfg_resp_V_ap_ack))) begin
                ap_reg_ioackin_cfg_resp_V_ap_ack <= ap_const_logic_0;
            end else if (ap_sig_bdd_178) begin
                ap_reg_ioackin_cfg_resp_V_ap_ack <= ap_const_logic_1;
            end
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~((cfg_req_V_ap_vld == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_cfg_resp_V_ap_ack)) & (grp_fu_116_p4 == ap_const_lv5_1) & ~(tmp_fu_129_p3 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_2_fu_205_p2))) begin
        s_first_ds_id_V <= {{cfg_req_V[ap_const_lv32_2F : ap_const_lv32_20]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~((cfg_req_V_ap_vld == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_cfg_resp_V_ap_ack)) & (grp_fu_116_p4 == ap_const_lv5_2) & ~(tmp_fu_129_p3 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_2_fu_205_p2))) begin
        s_first_index_V <= {{cfg_req_V[ap_const_lv32_2F : ap_const_lv32_20]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~((cfg_req_V_ap_vld == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_cfg_resp_V_ap_ack)) & (grp_fu_116_p4 == ap_const_lv5_3) & ~(tmp_fu_129_p3 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_2_fu_205_p2))) begin
        s_last_ds_id_V <= {{cfg_req_V[ap_const_lv32_2F : ap_const_lv32_20]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~((cfg_req_V_ap_vld == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_cfg_resp_V_ap_ack)) & (grp_fu_116_p4 == ap_const_lv5_4) & ~(tmp_fu_129_p3 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_2_fu_205_p2))) begin
        s_last_index_V <= {{cfg_req_V[ap_const_lv32_2F : ap_const_lv32_20]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~((cfg_req_V_ap_vld == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_cfg_resp_V_ap_ack)) & (grp_fu_116_p4 == ap_const_lv5_5) & ~(tmp_fu_129_p3 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_2_fu_205_p2))) begin
        s_pred_V <= {{cfg_req_V[ap_const_lv32_22 : ap_const_lv32_20]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~((cfg_req_V_ap_vld == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_cfg_resp_V_ap_ack)) & ~(tmp_fu_129_p3 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_2_fu_205_p2))) begin
        s_result[1] <= 1'b1;
s_result[2] <= 1'b1;
    end
end

/// ap_sig_ioackin_cfg_resp_V_ap_ack assign process. ///
always @ (cfg_resp_V_ap_ack or ap_reg_ioackin_cfg_resp_V_ap_ack)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_cfg_resp_V_ap_ack)) begin
        ap_sig_ioackin_cfg_resp_V_ap_ack = cfg_resp_V_ap_ack;
    end else begin
        ap_sig_ioackin_cfg_resp_V_ap_ack = ap_const_logic_1;
    end
end

/// cfg_req_V_ap_ack assign process. ///
always @ (cfg_req_V_ap_vld or ap_CS_fsm or ap_sig_ioackin_cfg_resp_V_ap_ack)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~((cfg_req_V_ap_vld == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_cfg_resp_V_ap_ack)))) begin
        cfg_req_V_ap_ack = ap_const_logic_1;
    end else begin
        cfg_req_V_ap_ack = ap_const_logic_0;
    end
end

/// cfg_resp_V_ap_vld assign process. ///
always @ (cfg_req_V_ap_vld or ap_CS_fsm or ap_reg_ioackin_cfg_resp_V_ap_ack)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(cfg_req_V_ap_vld == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_cfg_resp_V_ap_ack))) begin
        cfg_resp_V_ap_vld = ap_const_logic_1;
    end else begin
        cfg_resp_V_ap_vld = ap_const_logic_0;
    end
end

/// p_0211_1_phi_fu_94_p16 assign process. ///
always @ (resp_V_5_fu_141_p1 or ap_CS_fsm or tmp_fu_129_p3 or resp_V_4_fu_150_p1 or resp_V_3_fu_159_p1 or resp_V_2_fu_168_p1 or resp_V_1_fu_177_p1 or resp_V_fu_190_p1 or ap_sig_bdd_41 or ap_sig_bdd_47 or ap_sig_bdd_53 or ap_sig_bdd_59 or ap_sig_bdd_65 or ap_sig_bdd_71 or ap_sig_bdd_86)
begin
    if ((ap_ST_st1_fsm_0 == ap_CS_fsm)) begin
        if (~(tmp_fu_129_p3 == ap_const_lv1_0)) begin
            p_0211_1_phi_fu_94_p16 = ap_const_lv33_100000000;
        end else if (ap_sig_bdd_86) begin
            p_0211_1_phi_fu_94_p16 = ap_const_lv33_0;
        end else if (ap_sig_bdd_71) begin
            p_0211_1_phi_fu_94_p16 = resp_V_fu_190_p1;
        end else if (ap_sig_bdd_65) begin
            p_0211_1_phi_fu_94_p16 = resp_V_1_fu_177_p1;
        end else if (ap_sig_bdd_59) begin
            p_0211_1_phi_fu_94_p16 = resp_V_2_fu_168_p1;
        end else if (ap_sig_bdd_53) begin
            p_0211_1_phi_fu_94_p16 = resp_V_3_fu_159_p1;
        end else if (ap_sig_bdd_47) begin
            p_0211_1_phi_fu_94_p16 = resp_V_4_fu_150_p1;
        end else if (ap_sig_bdd_41) begin
            p_0211_1_phi_fu_94_p16 = resp_V_5_fu_141_p1;
        end else begin
            p_0211_1_phi_fu_94_p16 = 'bx;
        end
    end else begin
        p_0211_1_phi_fu_94_p16 = 'bx;
    end
end
always @ (cfg_req_V_ap_vld or ap_CS_fsm or ap_sig_ioackin_cfg_resp_V_ap_ack)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end

/// ap_sig_bdd_178 assign process. ///
always @ (cfg_req_V_ap_vld or cfg_resp_V_ap_ack)
begin
    ap_sig_bdd_178 = ((ap_const_logic_1 == cfg_resp_V_ap_ack) & ~(cfg_req_V_ap_vld == ap_const_logic_0));
end

/// ap_sig_bdd_41 assign process. ///
always @ (tmp_fu_129_p3 or grp_fu_116_p4)
begin
    ap_sig_bdd_41 = ((tmp_fu_129_p3 == ap_const_lv1_0) & (grp_fu_116_p4 == ap_const_lv5_5));
end

/// ap_sig_bdd_47 assign process. ///
always @ (tmp_fu_129_p3 or grp_fu_116_p4)
begin
    ap_sig_bdd_47 = ((tmp_fu_129_p3 == ap_const_lv1_0) & (grp_fu_116_p4 == ap_const_lv5_4));
end

/// ap_sig_bdd_53 assign process. ///
always @ (tmp_fu_129_p3 or grp_fu_116_p4)
begin
    ap_sig_bdd_53 = ((tmp_fu_129_p3 == ap_const_lv1_0) & (grp_fu_116_p4 == ap_const_lv5_3));
end

/// ap_sig_bdd_59 assign process. ///
always @ (tmp_fu_129_p3 or grp_fu_116_p4)
begin
    ap_sig_bdd_59 = ((tmp_fu_129_p3 == ap_const_lv1_0) & (grp_fu_116_p4 == ap_const_lv5_2));
end

/// ap_sig_bdd_65 assign process. ///
always @ (tmp_fu_129_p3 or grp_fu_116_p4)
begin
    ap_sig_bdd_65 = ((tmp_fu_129_p3 == ap_const_lv1_0) & (grp_fu_116_p4 == ap_const_lv5_1));
end

/// ap_sig_bdd_71 assign process. ///
always @ (tmp_fu_129_p3 or grp_fu_116_p4)
begin
    ap_sig_bdd_71 = ((tmp_fu_129_p3 == ap_const_lv1_0) & (grp_fu_116_p4 == ap_const_lv5_0));
end

/// ap_sig_bdd_86 assign process. ///
always @ (tmp_fu_129_p3 or grp_fu_116_p4)
begin
    ap_sig_bdd_86 = ((tmp_fu_129_p3 == ap_const_lv1_0) & ~(grp_fu_116_p4 == ap_const_lv5_5) & ~(grp_fu_116_p4 == ap_const_lv5_4) & ~(grp_fu_116_p4 == ap_const_lv5_3) & ~(grp_fu_116_p4 == ap_const_lv5_2) & ~(grp_fu_116_p4 == ap_const_lv5_1) & ~(grp_fu_116_p4 == ap_const_lv5_0));
end
assign cfg_resp_V = p_0211_1_phi_fu_94_p16;
assign grp_fu_116_p4 = {{cfg_req_V[ap_const_lv32_44 : ap_const_lv32_40]}};
assign resp_V_1_fu_177_p1 = $unsigned(s_first_ds_id_V);
assign resp_V_2_fu_168_p1 = $unsigned(s_first_index_V);
assign resp_V_3_fu_159_p1 = $unsigned(s_last_ds_id_V);
assign resp_V_4_fu_150_p1 = $unsigned(s_last_index_V);
assign resp_V_5_fu_141_p1 = $unsigned(s_pred_V);
assign resp_V_fu_190_p0 = $signed(s_result);
assign resp_V_fu_190_p1 = $unsigned(resp_V_fu_190_p0);
assign tmp_2_fu_205_p2 = (grp_fu_116_p4 == ap_const_lv5_0? 1'b1: 1'b0);
assign tmp_fu_129_p3 = cfg_req_V[ap_const_lv32_45];
always @ (posedge ap_clk)
begin
    s_result[0] <= 1'b0;
    s_result[3] <= 1'b0;
end



endmodule //top

